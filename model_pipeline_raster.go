/*
Eliona API

API to access Eliona Smart Building Assistant

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// PipelineRaster Pipeline calculation intervals.
type PipelineRaster string

// List of PipelineRaster
const (
	PIPELINE_RASTER_S1 PipelineRaster = "S1"
	PIPELINE_RASTER_S2 PipelineRaster = "S2"
	PIPELINE_RASTER_S3 PipelineRaster = "S3"
	PIPELINE_RASTER_S4 PipelineRaster = "S4"
	PIPELINE_RASTER_S5 PipelineRaster = "S5"
	PIPELINE_RASTER_S6 PipelineRaster = "S6"
	PIPELINE_RASTER_S10 PipelineRaster = "S10"
	PIPELINE_RASTER_S12 PipelineRaster = "S12"
	PIPELINE_RASTER_S15 PipelineRaster = "S15"
	PIPELINE_RASTER_S20 PipelineRaster = "S20"
	PIPELINE_RASTER_S30 PipelineRaster = "S30"
	PIPELINE_RASTER_M1 PipelineRaster = "M1"
	PIPELINE_RASTER_M2 PipelineRaster = "M2"
	PIPELINE_RASTER_M3 PipelineRaster = "M3"
	PIPELINE_RASTER_M4 PipelineRaster = "M4"
	PIPELINE_RASTER_M5 PipelineRaster = "M5"
	PIPELINE_RASTER_M6 PipelineRaster = "M6"
	PIPELINE_RASTER_M10 PipelineRaster = "M10"
	PIPELINE_RASTER_M12 PipelineRaster = "M12"
	PIPELINE_RASTER_M15 PipelineRaster = "M15"
	PIPELINE_RASTER_M20 PipelineRaster = "M20"
	PIPELINE_RASTER_M30 PipelineRaster = "M30"
	PIPELINE_RASTER_H1 PipelineRaster = "H1"
	PIPELINE_RASTER_H2 PipelineRaster = "H2"
	PIPELINE_RASTER_H3 PipelineRaster = "H3"
	PIPELINE_RASTER_H4 PipelineRaster = "H4"
	PIPELINE_RASTER_H6 PipelineRaster = "H6"
	PIPELINE_RASTER_H8 PipelineRaster = "H8"
	PIPELINE_RASTER_H12 PipelineRaster = "H12"
	PIPELINE_RASTER_DAY PipelineRaster = "DAY"
	PIPELINE_RASTER_WEEK PipelineRaster = "WEEK"
	PIPELINE_RASTER_MONTH PipelineRaster = "MONTH"
	PIPELINE_RASTER_QUARTER PipelineRaster = "QUARTER"
	PIPELINE_RASTER_YEAR PipelineRaster = "YEAR"
	PIPELINE_RASTER_DECADE PipelineRaster = "DECADE"
	PIPELINE_RASTER_CENTURY PipelineRaster = "CENTURY"
)

// All allowed values of PipelineRaster enum
var AllowedPipelineRasterEnumValues = []PipelineRaster{
	"S1",
	"S2",
	"S3",
	"S4",
	"S5",
	"S6",
	"S10",
	"S12",
	"S15",
	"S20",
	"S30",
	"M1",
	"M2",
	"M3",
	"M4",
	"M5",
	"M6",
	"M10",
	"M12",
	"M15",
	"M20",
	"M30",
	"H1",
	"H2",
	"H3",
	"H4",
	"H6",
	"H8",
	"H12",
	"DAY",
	"WEEK",
	"MONTH",
	"QUARTER",
	"YEAR",
	"DECADE",
	"CENTURY",
}

func (v *PipelineRaster) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PipelineRaster(value)
	for _, existing := range AllowedPipelineRasterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PipelineRaster", value)
}

// NewPipelineRasterFromValue returns a pointer to a valid PipelineRaster
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPipelineRasterFromValue(v string) (*PipelineRaster, error) {
	ev := PipelineRaster(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PipelineRaster: valid values are %v", v, AllowedPipelineRasterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PipelineRaster) IsValid() bool {
	for _, existing := range AllowedPipelineRasterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PipelineRaster value
func (v PipelineRaster) Ptr() *PipelineRaster {
	return &v
}

type NullablePipelineRaster struct {
	value *PipelineRaster
	isSet bool
}

func (v NullablePipelineRaster) Get() *PipelineRaster {
	return v.value
}

func (v *NullablePipelineRaster) Set(val *PipelineRaster) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineRaster) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineRaster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineRaster(val *PipelineRaster) *NullablePipelineRaster {
	return &NullablePipelineRaster{value: val, isSet: true}
}

func (v NullablePipelineRaster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineRaster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

