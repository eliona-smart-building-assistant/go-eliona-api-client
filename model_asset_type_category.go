/*
Eliona REST API

The Eliona REST API enables unified access to the resources and data of an Eliona environment.

API version: 2.9.2
Contact: hello@eliona.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AssetTypeCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetTypeCategory{}

// AssetTypeCategory A category for asset types
type AssetTypeCategory struct {
	// The unique name for this asset type category
	Name        string              `json:"name"`
	Translation NullableTranslation `json:"translation,omitempty"`
	// List of asset type category properties
	Properties []AssetTypeCategoryProperty `json:"properties,omitempty"`
}

type _AssetTypeCategory AssetTypeCategory

// NewAssetTypeCategory instantiates a new AssetTypeCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetTypeCategory(name string) *AssetTypeCategory {
	this := AssetTypeCategory{}
	this.Name = name
	return &this
}

// NewAssetTypeCategoryWithDefaults instantiates a new AssetTypeCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetTypeCategoryWithDefaults() *AssetTypeCategory {
	this := AssetTypeCategory{}
	return &this
}

// GetName returns the Name field value
func (o *AssetTypeCategory) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AssetTypeCategory) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AssetTypeCategory) SetName(v string) {
	o.Name = v
}

// GetTranslation returns the Translation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTypeCategory) GetTranslation() Translation {
	if o == nil || IsNil(o.Translation.Get()) {
		var ret Translation
		return ret
	}
	return *o.Translation.Get()
}

// GetTranslationOk returns a tuple with the Translation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTypeCategory) GetTranslationOk() (*Translation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Translation.Get(), o.Translation.IsSet()
}

// HasTranslation returns a boolean if a field has been set.
func (o *AssetTypeCategory) HasTranslation() bool {
	if o != nil && o.Translation.IsSet() {
		return true
	}

	return false
}

// SetTranslation gets a reference to the given NullableTranslation and assigns it to the Translation field.
func (o *AssetTypeCategory) SetTranslation(v Translation) {
	o.Translation.Set(&v)
}

// SetTranslationNil sets the value for Translation to be an explicit nil
func (o *AssetTypeCategory) SetTranslationNil() {
	o.Translation.Set(nil)
}

// UnsetTranslation ensures that no value is present for Translation, not even an explicit nil
func (o *AssetTypeCategory) UnsetTranslation() {
	o.Translation.Unset()
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetTypeCategory) GetProperties() []AssetTypeCategoryProperty {
	if o == nil {
		var ret []AssetTypeCategoryProperty
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetTypeCategory) GetPropertiesOk() ([]AssetTypeCategoryProperty, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *AssetTypeCategory) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []AssetTypeCategoryProperty and assigns it to the Properties field.
func (o *AssetTypeCategory) SetProperties(v []AssetTypeCategoryProperty) {
	o.Properties = v
}

func (o AssetTypeCategory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetTypeCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Translation.IsSet() {
		toSerialize["translation"] = o.Translation.Get()
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

func (o *AssetTypeCategory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssetTypeCategory := _AssetTypeCategory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssetTypeCategory)

	if err != nil {
		return err
	}

	*o = AssetTypeCategory(varAssetTypeCategory)

	return err
}

type NullableAssetTypeCategory struct {
	value *AssetTypeCategory
	isSet bool
}

func (v NullableAssetTypeCategory) Get() *AssetTypeCategory {
	return v.value
}

func (v *NullableAssetTypeCategory) Set(val *AssetTypeCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetTypeCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetTypeCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetTypeCategory(val *AssetTypeCategory) *NullableAssetTypeCategory {
	return &NullableAssetTypeCategory{value: val, isSet: true}
}

func (v NullableAssetTypeCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetTypeCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
