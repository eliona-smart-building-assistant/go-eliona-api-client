/*
Eliona API

API to access Eliona Smart Building Assistant

API version: 2.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Translation Readable text to display in frontend
type Translation struct {
	// German text
	De *string `json:"de,omitempty"`
	// English text
	En *string `json:"en,omitempty"`
	// French text
	Fr *string `json:"fr,omitempty"`
	// Italian text
	It *string `json:"it,omitempty"`
}

// NewTranslation instantiates a new Translation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslation() *Translation {
	this := Translation{}
	return &this
}

// NewTranslationWithDefaults instantiates a new Translation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslationWithDefaults() *Translation {
	this := Translation{}
	return &this
}

// GetDe returns the De field value if set, zero value otherwise.
func (o *Translation) GetDe() string {
	if o == nil || o.De == nil {
		var ret string
		return ret
	}
	return *o.De
}

// GetDeOk returns a tuple with the De field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Translation) GetDeOk() (*string, bool) {
	if o == nil || o.De == nil {
		return nil, false
	}
	return o.De, true
}

// HasDe returns a boolean if a field has been set.
func (o *Translation) HasDe() bool {
	if o != nil && o.De != nil {
		return true
	}

	return false
}

// SetDe gets a reference to the given string and assigns it to the De field.
func (o *Translation) SetDe(v string) {
	o.De = &v
}

// GetEn returns the En field value if set, zero value otherwise.
func (o *Translation) GetEn() string {
	if o == nil || o.En == nil {
		var ret string
		return ret
	}
	return *o.En
}

// GetEnOk returns a tuple with the En field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Translation) GetEnOk() (*string, bool) {
	if o == nil || o.En == nil {
		return nil, false
	}
	return o.En, true
}

// HasEn returns a boolean if a field has been set.
func (o *Translation) HasEn() bool {
	if o != nil && o.En != nil {
		return true
	}

	return false
}

// SetEn gets a reference to the given string and assigns it to the En field.
func (o *Translation) SetEn(v string) {
	o.En = &v
}

// GetFr returns the Fr field value if set, zero value otherwise.
func (o *Translation) GetFr() string {
	if o == nil || o.Fr == nil {
		var ret string
		return ret
	}
	return *o.Fr
}

// GetFrOk returns a tuple with the Fr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Translation) GetFrOk() (*string, bool) {
	if o == nil || o.Fr == nil {
		return nil, false
	}
	return o.Fr, true
}

// HasFr returns a boolean if a field has been set.
func (o *Translation) HasFr() bool {
	if o != nil && o.Fr != nil {
		return true
	}

	return false
}

// SetFr gets a reference to the given string and assigns it to the Fr field.
func (o *Translation) SetFr(v string) {
	o.Fr = &v
}

// GetIt returns the It field value if set, zero value otherwise.
func (o *Translation) GetIt() string {
	if o == nil || o.It == nil {
		var ret string
		return ret
	}
	return *o.It
}

// GetItOk returns a tuple with the It field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Translation) GetItOk() (*string, bool) {
	if o == nil || o.It == nil {
		return nil, false
	}
	return o.It, true
}

// HasIt returns a boolean if a field has been set.
func (o *Translation) HasIt() bool {
	if o != nil && o.It != nil {
		return true
	}

	return false
}

// SetIt gets a reference to the given string and assigns it to the It field.
func (o *Translation) SetIt(v string) {
	o.It = &v
}

func (o Translation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.De != nil {
		toSerialize["de"] = o.De
	}
	if o.En != nil {
		toSerialize["en"] = o.En
	}
	if o.Fr != nil {
		toSerialize["fr"] = o.Fr
	}
	if o.It != nil {
		toSerialize["it"] = o.It
	}
	return json.Marshal(toSerialize)
}

type NullableTranslation struct {
	value *Translation
	isSet bool
}

func (v NullableTranslation) Get() *Translation {
	return v.value
}

func (v *NullableTranslation) Set(val *Translation) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslation) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslation(val *Translation) *NullableTranslation {
	return &NullableTranslation{value: val, isSet: true}
}

func (v NullableTranslation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
