/*
Eliona API

API to access Eliona Smart Building Assistant

API version: 2.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// WidgetTypeElement An element for widget types
type WidgetTypeElement struct {
	// The category for this element
	Category string `json:"category"`
	// description text for this element
	Description string `json:"description"`
	// individual config parameters depending on category
	Config map[string]interface{} `json:"config,omitempty"`
}

// NewWidgetTypeElement instantiates a new WidgetTypeElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetTypeElement(category string, description string) *WidgetTypeElement {
	this := WidgetTypeElement{}
	this.Category = category
	this.Description = description
	return &this
}

// NewWidgetTypeElementWithDefaults instantiates a new WidgetTypeElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetTypeElementWithDefaults() *WidgetTypeElement {
	this := WidgetTypeElement{}
	return &this
}

// GetCategory returns the Category field value
func (o *WidgetTypeElement) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *WidgetTypeElement) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *WidgetTypeElement) SetCategory(v string) {
	o.Category = v
}

// GetDescription returns the Description field value
func (o *WidgetTypeElement) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *WidgetTypeElement) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *WidgetTypeElement) SetDescription(v string) {
	o.Description = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *WidgetTypeElement) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetTypeElement) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *WidgetTypeElement) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *WidgetTypeElement) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o WidgetTypeElement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["category"] = o.Category
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableWidgetTypeElement struct {
	value *WidgetTypeElement
	isSet bool
}

func (v NullableWidgetTypeElement) Get() *WidgetTypeElement {
	return v.value
}

func (v *NullableWidgetTypeElement) Set(val *WidgetTypeElement) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetTypeElement) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetTypeElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetTypeElement(val *WidgetTypeElement) *NullableWidgetTypeElement {
	return &NullableWidgetTypeElement{value: val, isSet: true}
}

func (v NullableWidgetTypeElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetTypeElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
