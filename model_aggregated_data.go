/*
Eliona API

API to access Eliona Smart Building Assistant

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// AggregatedData Aggregated data combines multiple data points for a periodical raster
type AggregatedData struct {
	// ID of this aggregated data set
	Id int32 `json:"id"`
	// ID of the corresponding asset
	AssetId int32 `json:"assetId"`
	Subtype DataSubtype `json:"subtype"`
	// Name of the attribute which holds the data points
	Attribute *string `json:"attribute,omitempty"`
	Raster PipelineRaster `json:"raster"`
	// Timestamp of this aggregated data set
	Timestamp NullableTime `json:"timestamp,omitempty"`
	// Count of data points in this aggregated data set
	Count NullableFloat64 `json:"count,omitempty"`
	// Average of all data points for this aggregated data set
	Average NullableFloat64 `json:"average,omitempty"`
	// Sum of all data points for this aggregated data set
	Sum NullableFloat64 `json:"sum,omitempty"`
	// First data point in this aggregated data set
	First NullableFloat64 `json:"first,omitempty"`
	// Data point with the most minimal value in this aggregated data set
	Min NullableFloat64 `json:"min,omitempty"`
	// Data point with the most maximal value in this aggregated data set
	Max NullableFloat64 `json:"max,omitempty"`
	// Latest data point in this aggregated data set
	Last NullableFloat64 `json:"last,omitempty"`
	// Timestamp of the latest data point
	LastTimestamp NullableTime `json:"lastTimestamp,omitempty"`
	// The name of the corresponding asset type
	AssetTypeName NullableString `json:"assetTypeName,omitempty"`
}

// NewAggregatedData instantiates a new AggregatedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregatedData(id int32, assetId int32, subtype DataSubtype, raster PipelineRaster) *AggregatedData {
	this := AggregatedData{}
	this.Id = id
	this.AssetId = assetId
	this.Subtype = subtype
	this.Raster = raster
	return &this
}

// NewAggregatedDataWithDefaults instantiates a new AggregatedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregatedDataWithDefaults() *AggregatedData {
	this := AggregatedData{}
	var subtype DataSubtype = SUBTYPE_INPUT
	this.Subtype = subtype
	return &this
}

// GetId returns the Id field value
func (o *AggregatedData) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AggregatedData) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AggregatedData) SetId(v int32) {
	o.Id = v
}

// GetAssetId returns the AssetId field value
func (o *AggregatedData) GetAssetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *AggregatedData) GetAssetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *AggregatedData) SetAssetId(v int32) {
	o.AssetId = v
}

// GetSubtype returns the Subtype field value
func (o *AggregatedData) GetSubtype() DataSubtype {
	if o == nil {
		var ret DataSubtype
		return ret
	}

	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
func (o *AggregatedData) GetSubtypeOk() (*DataSubtype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtype, true
}

// SetSubtype sets field value
func (o *AggregatedData) SetSubtype(v DataSubtype) {
	o.Subtype = v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *AggregatedData) GetAttribute() string {
	if o == nil || o.Attribute == nil {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregatedData) GetAttributeOk() (*string, bool) {
	if o == nil || o.Attribute == nil {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *AggregatedData) HasAttribute() bool {
	if o != nil && o.Attribute != nil {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *AggregatedData) SetAttribute(v string) {
	o.Attribute = &v
}

// GetRaster returns the Raster field value
func (o *AggregatedData) GetRaster() PipelineRaster {
	if o == nil {
		var ret PipelineRaster
		return ret
	}

	return o.Raster
}

// GetRasterOk returns a tuple with the Raster field value
// and a boolean to check if the value has been set.
func (o *AggregatedData) GetRasterOk() (*PipelineRaster, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Raster, true
}

// SetRaster sets field value
func (o *AggregatedData) SetRaster(v PipelineRaster) {
	o.Raster = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AggregatedData) GetTimestamp() time.Time {
	if o == nil || o.Timestamp.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AggregatedData) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *AggregatedData) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *AggregatedData) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *AggregatedData) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *AggregatedData) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AggregatedData) GetCount() float64 {
	if o == nil || o.Count.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AggregatedData) GetCountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *AggregatedData) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableFloat64 and assigns it to the Count field.
func (o *AggregatedData) SetCount(v float64) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *AggregatedData) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *AggregatedData) UnsetCount() {
	o.Count.Unset()
}

// GetAverage returns the Average field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AggregatedData) GetAverage() float64 {
	if o == nil || o.Average.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Average.Get()
}

// GetAverageOk returns a tuple with the Average field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AggregatedData) GetAverageOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Average.Get(), o.Average.IsSet()
}

// HasAverage returns a boolean if a field has been set.
func (o *AggregatedData) HasAverage() bool {
	if o != nil && o.Average.IsSet() {
		return true
	}

	return false
}

// SetAverage gets a reference to the given NullableFloat64 and assigns it to the Average field.
func (o *AggregatedData) SetAverage(v float64) {
	o.Average.Set(&v)
}
// SetAverageNil sets the value for Average to be an explicit nil
func (o *AggregatedData) SetAverageNil() {
	o.Average.Set(nil)
}

// UnsetAverage ensures that no value is present for Average, not even an explicit nil
func (o *AggregatedData) UnsetAverage() {
	o.Average.Unset()
}

// GetSum returns the Sum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AggregatedData) GetSum() float64 {
	if o == nil || o.Sum.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Sum.Get()
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AggregatedData) GetSumOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sum.Get(), o.Sum.IsSet()
}

// HasSum returns a boolean if a field has been set.
func (o *AggregatedData) HasSum() bool {
	if o != nil && o.Sum.IsSet() {
		return true
	}

	return false
}

// SetSum gets a reference to the given NullableFloat64 and assigns it to the Sum field.
func (o *AggregatedData) SetSum(v float64) {
	o.Sum.Set(&v)
}
// SetSumNil sets the value for Sum to be an explicit nil
func (o *AggregatedData) SetSumNil() {
	o.Sum.Set(nil)
}

// UnsetSum ensures that no value is present for Sum, not even an explicit nil
func (o *AggregatedData) UnsetSum() {
	o.Sum.Unset()
}

// GetFirst returns the First field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AggregatedData) GetFirst() float64 {
	if o == nil || o.First.Get() == nil {
		var ret float64
		return ret
	}
	return *o.First.Get()
}

// GetFirstOk returns a tuple with the First field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AggregatedData) GetFirstOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.First.Get(), o.First.IsSet()
}

// HasFirst returns a boolean if a field has been set.
func (o *AggregatedData) HasFirst() bool {
	if o != nil && o.First.IsSet() {
		return true
	}

	return false
}

// SetFirst gets a reference to the given NullableFloat64 and assigns it to the First field.
func (o *AggregatedData) SetFirst(v float64) {
	o.First.Set(&v)
}
// SetFirstNil sets the value for First to be an explicit nil
func (o *AggregatedData) SetFirstNil() {
	o.First.Set(nil)
}

// UnsetFirst ensures that no value is present for First, not even an explicit nil
func (o *AggregatedData) UnsetFirst() {
	o.First.Unset()
}

// GetMin returns the Min field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AggregatedData) GetMin() float64 {
	if o == nil || o.Min.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Min.Get()
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AggregatedData) GetMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Min.Get(), o.Min.IsSet()
}

// HasMin returns a boolean if a field has been set.
func (o *AggregatedData) HasMin() bool {
	if o != nil && o.Min.IsSet() {
		return true
	}

	return false
}

// SetMin gets a reference to the given NullableFloat64 and assigns it to the Min field.
func (o *AggregatedData) SetMin(v float64) {
	o.Min.Set(&v)
}
// SetMinNil sets the value for Min to be an explicit nil
func (o *AggregatedData) SetMinNil() {
	o.Min.Set(nil)
}

// UnsetMin ensures that no value is present for Min, not even an explicit nil
func (o *AggregatedData) UnsetMin() {
	o.Min.Unset()
}

// GetMax returns the Max field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AggregatedData) GetMax() float64 {
	if o == nil || o.Max.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Max.Get()
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AggregatedData) GetMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Max.Get(), o.Max.IsSet()
}

// HasMax returns a boolean if a field has been set.
func (o *AggregatedData) HasMax() bool {
	if o != nil && o.Max.IsSet() {
		return true
	}

	return false
}

// SetMax gets a reference to the given NullableFloat64 and assigns it to the Max field.
func (o *AggregatedData) SetMax(v float64) {
	o.Max.Set(&v)
}
// SetMaxNil sets the value for Max to be an explicit nil
func (o *AggregatedData) SetMaxNil() {
	o.Max.Set(nil)
}

// UnsetMax ensures that no value is present for Max, not even an explicit nil
func (o *AggregatedData) UnsetMax() {
	o.Max.Unset()
}

// GetLast returns the Last field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AggregatedData) GetLast() float64 {
	if o == nil || o.Last.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Last.Get()
}

// GetLastOk returns a tuple with the Last field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AggregatedData) GetLastOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Last.Get(), o.Last.IsSet()
}

// HasLast returns a boolean if a field has been set.
func (o *AggregatedData) HasLast() bool {
	if o != nil && o.Last.IsSet() {
		return true
	}

	return false
}

// SetLast gets a reference to the given NullableFloat64 and assigns it to the Last field.
func (o *AggregatedData) SetLast(v float64) {
	o.Last.Set(&v)
}
// SetLastNil sets the value for Last to be an explicit nil
func (o *AggregatedData) SetLastNil() {
	o.Last.Set(nil)
}

// UnsetLast ensures that no value is present for Last, not even an explicit nil
func (o *AggregatedData) UnsetLast() {
	o.Last.Unset()
}

// GetLastTimestamp returns the LastTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AggregatedData) GetLastTimestamp() time.Time {
	if o == nil || o.LastTimestamp.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastTimestamp.Get()
}

// GetLastTimestampOk returns a tuple with the LastTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AggregatedData) GetLastTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastTimestamp.Get(), o.LastTimestamp.IsSet()
}

// HasLastTimestamp returns a boolean if a field has been set.
func (o *AggregatedData) HasLastTimestamp() bool {
	if o != nil && o.LastTimestamp.IsSet() {
		return true
	}

	return false
}

// SetLastTimestamp gets a reference to the given NullableTime and assigns it to the LastTimestamp field.
func (o *AggregatedData) SetLastTimestamp(v time.Time) {
	o.LastTimestamp.Set(&v)
}
// SetLastTimestampNil sets the value for LastTimestamp to be an explicit nil
func (o *AggregatedData) SetLastTimestampNil() {
	o.LastTimestamp.Set(nil)
}

// UnsetLastTimestamp ensures that no value is present for LastTimestamp, not even an explicit nil
func (o *AggregatedData) UnsetLastTimestamp() {
	o.LastTimestamp.Unset()
}

// GetAssetTypeName returns the AssetTypeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AggregatedData) GetAssetTypeName() string {
	if o == nil || o.AssetTypeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AssetTypeName.Get()
}

// GetAssetTypeNameOk returns a tuple with the AssetTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AggregatedData) GetAssetTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssetTypeName.Get(), o.AssetTypeName.IsSet()
}

// HasAssetTypeName returns a boolean if a field has been set.
func (o *AggregatedData) HasAssetTypeName() bool {
	if o != nil && o.AssetTypeName.IsSet() {
		return true
	}

	return false
}

// SetAssetTypeName gets a reference to the given NullableString and assigns it to the AssetTypeName field.
func (o *AggregatedData) SetAssetTypeName(v string) {
	o.AssetTypeName.Set(&v)
}
// SetAssetTypeNameNil sets the value for AssetTypeName to be an explicit nil
func (o *AggregatedData) SetAssetTypeNameNil() {
	o.AssetTypeName.Set(nil)
}

// UnsetAssetTypeName ensures that no value is present for AssetTypeName, not even an explicit nil
func (o *AggregatedData) UnsetAssetTypeName() {
	o.AssetTypeName.Unset()
}

func (o AggregatedData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["assetId"] = o.AssetId
	}
	if true {
		toSerialize["subtype"] = o.Subtype
	}
	if o.Attribute != nil {
		toSerialize["attribute"] = o.Attribute
	}
	if true {
		toSerialize["raster"] = o.Raster
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.Average.IsSet() {
		toSerialize["average"] = o.Average.Get()
	}
	if o.Sum.IsSet() {
		toSerialize["sum"] = o.Sum.Get()
	}
	if o.First.IsSet() {
		toSerialize["first"] = o.First.Get()
	}
	if o.Min.IsSet() {
		toSerialize["min"] = o.Min.Get()
	}
	if o.Max.IsSet() {
		toSerialize["max"] = o.Max.Get()
	}
	if o.Last.IsSet() {
		toSerialize["last"] = o.Last.Get()
	}
	if o.LastTimestamp.IsSet() {
		toSerialize["lastTimestamp"] = o.LastTimestamp.Get()
	}
	if o.AssetTypeName.IsSet() {
		toSerialize["assetTypeName"] = o.AssetTypeName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAggregatedData struct {
	value *AggregatedData
	isSet bool
}

func (v NullableAggregatedData) Get() *AggregatedData {
	return v.value
}

func (v *NullableAggregatedData) Set(val *AggregatedData) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregatedData) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregatedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregatedData(val *AggregatedData) *NullableAggregatedData {
	return &NullableAggregatedData{value: val, isSet: true}
}

func (v NullableAggregatedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregatedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


