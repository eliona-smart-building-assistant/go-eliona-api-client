/*
Eliona API

API to access Eliona Smart Building Assistant

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MbusAgentMapping struct for MbusAgentMapping
type MbusAgentMapping struct {
	Class AgentClass `json:"class"`
	// Unique id for the mapping
	Id NullableString `json:"id,omitempty"`
	// The id of the agent the mapping belongs to
	AgentId int32 `json:"agentId"`
	// Is the mapping enabled or not
	Enable bool `json:"enable"`
	// ID of the corresponding asset
	AssetId int32 `json:"assetId"`
	Subtype *HeapSubtype `json:"subtype,omitempty"`
	// Name of the attribute to map
	Attribute NullableString `json:"attribute,omitempty"`
	Field int32 `json:"field"`
	Scale NullableFloat64 `json:"scale,omitempty"`
	Zero NullableFloat64 `json:"zero,omitempty"`
}

// NewMbusAgentMapping instantiates a new MbusAgentMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMbusAgentMapping(class AgentClass, agentId int32, enable bool, assetId int32, field int32) *MbusAgentMapping {
	this := MbusAgentMapping{}
	this.Class = class
	this.AgentId = agentId
	this.Enable = enable
	this.AssetId = assetId
	var subtype HeapSubtype = SUBTYPE_INPUT
	this.Subtype = &subtype
	this.Field = field
	return &this
}

// NewMbusAgentMappingWithDefaults instantiates a new MbusAgentMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMbusAgentMappingWithDefaults() *MbusAgentMapping {
	this := MbusAgentMapping{}
	var enable bool = true
	this.Enable = enable
	var subtype HeapSubtype = SUBTYPE_INPUT
	this.Subtype = &subtype
	return &this
}

// GetClass returns the Class field value
func (o *MbusAgentMapping) GetClass() AgentClass {
	if o == nil {
		var ret AgentClass
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *MbusAgentMapping) GetClassOk() (*AgentClass, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *MbusAgentMapping) SetClass(v AgentClass) {
	o.Class = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MbusAgentMapping) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MbusAgentMapping) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *MbusAgentMapping) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *MbusAgentMapping) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *MbusAgentMapping) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *MbusAgentMapping) UnsetId() {
	o.Id.Unset()
}

// GetAgentId returns the AgentId field value
func (o *MbusAgentMapping) GetAgentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value
// and a boolean to check if the value has been set.
func (o *MbusAgentMapping) GetAgentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgentId, true
}

// SetAgentId sets field value
func (o *MbusAgentMapping) SetAgentId(v int32) {
	o.AgentId = v
}

// GetEnable returns the Enable field value
func (o *MbusAgentMapping) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *MbusAgentMapping) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *MbusAgentMapping) SetEnable(v bool) {
	o.Enable = v
}

// GetAssetId returns the AssetId field value
func (o *MbusAgentMapping) GetAssetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *MbusAgentMapping) GetAssetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *MbusAgentMapping) SetAssetId(v int32) {
	o.AssetId = v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *MbusAgentMapping) GetSubtype() HeapSubtype {
	if o == nil || o.Subtype == nil {
		var ret HeapSubtype
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MbusAgentMapping) GetSubtypeOk() (*HeapSubtype, bool) {
	if o == nil || o.Subtype == nil {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *MbusAgentMapping) HasSubtype() bool {
	if o != nil && o.Subtype != nil {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given HeapSubtype and assigns it to the Subtype field.
func (o *MbusAgentMapping) SetSubtype(v HeapSubtype) {
	o.Subtype = &v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MbusAgentMapping) GetAttribute() string {
	if o == nil || o.Attribute.Get() == nil {
		var ret string
		return ret
	}
	return *o.Attribute.Get()
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MbusAgentMapping) GetAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attribute.Get(), o.Attribute.IsSet()
}

// HasAttribute returns a boolean if a field has been set.
func (o *MbusAgentMapping) HasAttribute() bool {
	if o != nil && o.Attribute.IsSet() {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given NullableString and assigns it to the Attribute field.
func (o *MbusAgentMapping) SetAttribute(v string) {
	o.Attribute.Set(&v)
}
// SetAttributeNil sets the value for Attribute to be an explicit nil
func (o *MbusAgentMapping) SetAttributeNil() {
	o.Attribute.Set(nil)
}

// UnsetAttribute ensures that no value is present for Attribute, not even an explicit nil
func (o *MbusAgentMapping) UnsetAttribute() {
	o.Attribute.Unset()
}

// GetField returns the Field field value
func (o *MbusAgentMapping) GetField() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *MbusAgentMapping) GetFieldOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *MbusAgentMapping) SetField(v int32) {
	o.Field = v
}

// GetScale returns the Scale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MbusAgentMapping) GetScale() float64 {
	if o == nil || o.Scale.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Scale.Get()
}

// GetScaleOk returns a tuple with the Scale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MbusAgentMapping) GetScaleOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scale.Get(), o.Scale.IsSet()
}

// HasScale returns a boolean if a field has been set.
func (o *MbusAgentMapping) HasScale() bool {
	if o != nil && o.Scale.IsSet() {
		return true
	}

	return false
}

// SetScale gets a reference to the given NullableFloat64 and assigns it to the Scale field.
func (o *MbusAgentMapping) SetScale(v float64) {
	o.Scale.Set(&v)
}
// SetScaleNil sets the value for Scale to be an explicit nil
func (o *MbusAgentMapping) SetScaleNil() {
	o.Scale.Set(nil)
}

// UnsetScale ensures that no value is present for Scale, not even an explicit nil
func (o *MbusAgentMapping) UnsetScale() {
	o.Scale.Unset()
}

// GetZero returns the Zero field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MbusAgentMapping) GetZero() float64 {
	if o == nil || o.Zero.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Zero.Get()
}

// GetZeroOk returns a tuple with the Zero field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MbusAgentMapping) GetZeroOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Zero.Get(), o.Zero.IsSet()
}

// HasZero returns a boolean if a field has been set.
func (o *MbusAgentMapping) HasZero() bool {
	if o != nil && o.Zero.IsSet() {
		return true
	}

	return false
}

// SetZero gets a reference to the given NullableFloat64 and assigns it to the Zero field.
func (o *MbusAgentMapping) SetZero(v float64) {
	o.Zero.Set(&v)
}
// SetZeroNil sets the value for Zero to be an explicit nil
func (o *MbusAgentMapping) SetZeroNil() {
	o.Zero.Set(nil)
}

// UnsetZero ensures that no value is present for Zero, not even an explicit nil
func (o *MbusAgentMapping) UnsetZero() {
	o.Zero.Unset()
}

func (o MbusAgentMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["class"] = o.Class
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if true {
		toSerialize["agentId"] = o.AgentId
	}
	if true {
		toSerialize["enable"] = o.Enable
	}
	if true {
		toSerialize["assetId"] = o.AssetId
	}
	if o.Subtype != nil {
		toSerialize["subtype"] = o.Subtype
	}
	if o.Attribute.IsSet() {
		toSerialize["attribute"] = o.Attribute.Get()
	}
	if true {
		toSerialize["field"] = o.Field
	}
	if o.Scale.IsSet() {
		toSerialize["scale"] = o.Scale.Get()
	}
	if o.Zero.IsSet() {
		toSerialize["zero"] = o.Zero.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMbusAgentMapping struct {
	value *MbusAgentMapping
	isSet bool
}

func (v NullableMbusAgentMapping) Get() *MbusAgentMapping {
	return v.value
}

func (v *NullableMbusAgentMapping) Set(val *MbusAgentMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableMbusAgentMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableMbusAgentMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMbusAgentMapping(val *MbusAgentMapping) *NullableMbusAgentMapping {
	return &NullableMbusAgentMapping{value: val, isSet: true}
}

func (v NullableMbusAgentMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMbusAgentMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


