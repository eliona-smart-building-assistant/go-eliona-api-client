/*
Eliona API

API to access Eliona Smart Building Assistant

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AgentMappingGeneral A general mapping of attributes for an agent
type AgentMappingGeneral struct {
	Class AgentClass `json:"class"`
	// Unique id for the mapping
	Id NullableString `json:"id,omitempty"`
	// The id of the agent the mapping belongs to
	AgentId int32 `json:"agentId"`
	// Is the mapping enabled or not
	Enable bool `json:"enable"`
	// ID of the corresponding asset
	AssetId int32 `json:"assetId"`
	Subtype *HeapSubtype `json:"subtype,omitempty"`
	// Name of the attribute to map
	Attribute NullableString `json:"attribute,omitempty"`
}

// NewAgentMappingGeneral instantiates a new AgentMappingGeneral object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentMappingGeneral(class AgentClass, agentId int32, enable bool, assetId int32) *AgentMappingGeneral {
	this := AgentMappingGeneral{}
	this.Class = class
	this.AgentId = agentId
	this.Enable = enable
	this.AssetId = assetId
	var subtype HeapSubtype = SUBTYPE_INPUT
	this.Subtype = &subtype
	return &this
}

// NewAgentMappingGeneralWithDefaults instantiates a new AgentMappingGeneral object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentMappingGeneralWithDefaults() *AgentMappingGeneral {
	this := AgentMappingGeneral{}
	var enable bool = true
	this.Enable = enable
	var subtype HeapSubtype = SUBTYPE_INPUT
	this.Subtype = &subtype
	return &this
}

// GetClass returns the Class field value
func (o *AgentMappingGeneral) GetClass() AgentClass {
	if o == nil {
		var ret AgentClass
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *AgentMappingGeneral) GetClassOk() (*AgentClass, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *AgentMappingGeneral) SetClass(v AgentClass) {
	o.Class = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgentMappingGeneral) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgentMappingGeneral) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *AgentMappingGeneral) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *AgentMappingGeneral) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *AgentMappingGeneral) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *AgentMappingGeneral) UnsetId() {
	o.Id.Unset()
}

// GetAgentId returns the AgentId field value
func (o *AgentMappingGeneral) GetAgentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value
// and a boolean to check if the value has been set.
func (o *AgentMappingGeneral) GetAgentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgentId, true
}

// SetAgentId sets field value
func (o *AgentMappingGeneral) SetAgentId(v int32) {
	o.AgentId = v
}

// GetEnable returns the Enable field value
func (o *AgentMappingGeneral) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *AgentMappingGeneral) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *AgentMappingGeneral) SetEnable(v bool) {
	o.Enable = v
}

// GetAssetId returns the AssetId field value
func (o *AgentMappingGeneral) GetAssetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *AgentMappingGeneral) GetAssetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *AgentMappingGeneral) SetAssetId(v int32) {
	o.AssetId = v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *AgentMappingGeneral) GetSubtype() HeapSubtype {
	if o == nil || o.Subtype == nil {
		var ret HeapSubtype
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentMappingGeneral) GetSubtypeOk() (*HeapSubtype, bool) {
	if o == nil || o.Subtype == nil {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *AgentMappingGeneral) HasSubtype() bool {
	if o != nil && o.Subtype != nil {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given HeapSubtype and assigns it to the Subtype field.
func (o *AgentMappingGeneral) SetSubtype(v HeapSubtype) {
	o.Subtype = &v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgentMappingGeneral) GetAttribute() string {
	if o == nil || o.Attribute.Get() == nil {
		var ret string
		return ret
	}
	return *o.Attribute.Get()
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgentMappingGeneral) GetAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attribute.Get(), o.Attribute.IsSet()
}

// HasAttribute returns a boolean if a field has been set.
func (o *AgentMappingGeneral) HasAttribute() bool {
	if o != nil && o.Attribute.IsSet() {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given NullableString and assigns it to the Attribute field.
func (o *AgentMappingGeneral) SetAttribute(v string) {
	o.Attribute.Set(&v)
}
// SetAttributeNil sets the value for Attribute to be an explicit nil
func (o *AgentMappingGeneral) SetAttributeNil() {
	o.Attribute.Set(nil)
}

// UnsetAttribute ensures that no value is present for Attribute, not even an explicit nil
func (o *AgentMappingGeneral) UnsetAttribute() {
	o.Attribute.Unset()
}

func (o AgentMappingGeneral) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["class"] = o.Class
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if true {
		toSerialize["agentId"] = o.AgentId
	}
	if true {
		toSerialize["enable"] = o.Enable
	}
	if true {
		toSerialize["assetId"] = o.AssetId
	}
	if o.Subtype != nil {
		toSerialize["subtype"] = o.Subtype
	}
	if o.Attribute.IsSet() {
		toSerialize["attribute"] = o.Attribute.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAgentMappingGeneral struct {
	value *AgentMappingGeneral
	isSet bool
}

func (v NullableAgentMappingGeneral) Get() *AgentMappingGeneral {
	return v.value
}

func (v *NullableAgentMappingGeneral) Set(val *AgentMappingGeneral) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentMappingGeneral) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentMappingGeneral) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentMappingGeneral(val *AgentMappingGeneral) *NullableAgentMappingGeneral {
	return &NullableAgentMappingGeneral{value: val, isSet: true}
}

func (v NullableAgentMappingGeneral) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentMappingGeneral) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


