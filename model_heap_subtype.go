/*
Eliona API

API to access Eliona Smart Building Assistant

API version: 2.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// HeapSubtype Type of asset heap data
type HeapSubtype string

// List of HeapSubtype
const (
	INPUT  HeapSubtype = "input"
	INFO   HeapSubtype = "info"
	STATUS HeapSubtype = "status"
	OUTPUT HeapSubtype = "output"
)

// All allowed values of HeapSubtype enum
var AllowedHeapSubtypeEnumValues = []HeapSubtype{
	"input",
	"info",
	"status",
	"output",
}

func (v *HeapSubtype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HeapSubtype(value)
	for _, existing := range AllowedHeapSubtypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HeapSubtype", value)
}

// NewHeapSubtypeFromValue returns a pointer to a valid HeapSubtype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHeapSubtypeFromValue(v string) (*HeapSubtype, error) {
	ev := HeapSubtype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HeapSubtype: valid values are %v", v, AllowedHeapSubtypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HeapSubtype) IsValid() bool {
	for _, existing := range AllowedHeapSubtypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HeapSubtype value
func (v HeapSubtype) Ptr() *HeapSubtype {
	return &v
}

type NullableHeapSubtype struct {
	value *HeapSubtype
	isSet bool
}

func (v NullableHeapSubtype) Get() *HeapSubtype {
	return v.value
}

func (v *NullableHeapSubtype) Set(val *HeapSubtype) {
	v.value = val
	v.isSet = true
}

func (v NullableHeapSubtype) IsSet() bool {
	return v.isSet
}

func (v *NullableHeapSubtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeapSubtype(val *HeapSubtype) *NullableHeapSubtype {
	return &NullableHeapSubtype{value: val, isSet: true}
}

func (v NullableHeapSubtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeapSubtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
