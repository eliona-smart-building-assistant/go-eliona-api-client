/*
Eliona API

API to access Eliona Smart Building Assistant

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// AgentMapping struct for AgentMapping
type AgentMapping struct {
	IosysAgentMapping *IosysAgentMapping
	MbusAgentMapping *MbusAgentMapping
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AgentMapping) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'IosysAgentMapping'
	if jsonDict["class"] == "IosysAgentMapping" {
		// try to unmarshal JSON data into IosysAgentMapping
		err = json.Unmarshal(data, &dst.IosysAgentMapping);
		if err == nil {
			jsonIosysAgentMapping, _ := json.Marshal(dst.IosysAgentMapping)
			if string(jsonIosysAgentMapping) == "{}" { // empty struct
				dst.IosysAgentMapping = nil
			} else {
				return nil // data stored in dst.IosysAgentMapping, return on the first match
			}
		} else {
			dst.IosysAgentMapping = nil
		}
	}

	// check if the discriminator value is 'MbusAgentMapping'
	if jsonDict["class"] == "MbusAgentMapping" {
		// try to unmarshal JSON data into MbusAgentMapping
		err = json.Unmarshal(data, &dst.MbusAgentMapping);
		if err == nil {
			jsonMbusAgentMapping, _ := json.Marshal(dst.MbusAgentMapping)
			if string(jsonMbusAgentMapping) == "{}" { // empty struct
				dst.MbusAgentMapping = nil
			} else {
				return nil // data stored in dst.MbusAgentMapping, return on the first match
			}
		} else {
			dst.MbusAgentMapping = nil
		}
	}

	// try to unmarshal JSON data into IosysAgentMapping
	err = json.Unmarshal(data, &dst.IosysAgentMapping);
	if err == nil {
		jsonIosysAgentMapping, _ := json.Marshal(dst.IosysAgentMapping)
		if string(jsonIosysAgentMapping) == "{}" { // empty struct
			dst.IosysAgentMapping = nil
		} else {
			return nil // data stored in dst.IosysAgentMapping, return on the first match
		}
	} else {
		dst.IosysAgentMapping = nil
	}

	// try to unmarshal JSON data into MbusAgentMapping
	err = json.Unmarshal(data, &dst.MbusAgentMapping);
	if err == nil {
		jsonMbusAgentMapping, _ := json.Marshal(dst.MbusAgentMapping)
		if string(jsonMbusAgentMapping) == "{}" { // empty struct
			dst.MbusAgentMapping = nil
		} else {
			return nil // data stored in dst.MbusAgentMapping, return on the first match
		}
	} else {
		dst.MbusAgentMapping = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(AgentMapping)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *AgentMapping) MarshalJSON() ([]byte, error) {
	if src.IosysAgentMapping != nil {
		return json.Marshal(&src.IosysAgentMapping)
	}

	if src.MbusAgentMapping != nil {
		return json.Marshal(&src.MbusAgentMapping)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableAgentMapping struct {
	value *AgentMapping
	isSet bool
}

func (v NullableAgentMapping) Get() *AgentMapping {
	return v.value
}

func (v *NullableAgentMapping) Set(val *AgentMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentMapping(val *AgentMapping) *NullableAgentMapping {
	return &NullableAgentMapping{value: val, isSet: true}
}

func (v NullableAgentMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


