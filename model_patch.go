/*
Eliona API

API to access Eliona Smart Building Assistant

API version: 2.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Patch A patch for an app
type Patch struct {
	// Name of the app
	AppName string `json:"appName"`
	// Name of the patch
	Name string `json:"name"`
	// Is the app active or inactive
	Active *bool `json:"active,omitempty"`
	// Is the app already applied or not
	Applied *bool `json:"applied,omitempty"`
}

// NewPatch instantiates a new Patch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatch(appName string, name string) *Patch {
	this := Patch{}
	this.AppName = appName
	this.Name = name
	return &this
}

// NewPatchWithDefaults instantiates a new Patch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchWithDefaults() *Patch {
	this := Patch{}
	return &this
}

// GetAppName returns the AppName field value
func (o *Patch) GetAppName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value
// and a boolean to check if the value has been set.
func (o *Patch) GetAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppName, true
}

// SetAppName sets field value
func (o *Patch) SetAppName(v string) {
	o.AppName = v
}

// GetName returns the Name field value
func (o *Patch) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Patch) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Patch) SetName(v string) {
	o.Name = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Patch) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patch) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Patch) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Patch) SetActive(v bool) {
	o.Active = &v
}

// GetApplied returns the Applied field value if set, zero value otherwise.
func (o *Patch) GetApplied() bool {
	if o == nil || o.Applied == nil {
		var ret bool
		return ret
	}
	return *o.Applied
}

// GetAppliedOk returns a tuple with the Applied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Patch) GetAppliedOk() (*bool, bool) {
	if o == nil || o.Applied == nil {
		return nil, false
	}
	return o.Applied, true
}

// HasApplied returns a boolean if a field has been set.
func (o *Patch) HasApplied() bool {
	if o != nil && o.Applied != nil {
		return true
	}

	return false
}

// SetApplied gets a reference to the given bool and assigns it to the Applied field.
func (o *Patch) SetApplied(v bool) {
	o.Applied = &v
}

func (o Patch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["appName"] = o.AppName
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Applied != nil {
		toSerialize["applied"] = o.Applied
	}
	return json.Marshal(toSerialize)
}

type NullablePatch struct {
	value *Patch
	isSet bool
}

func (v NullablePatch) Get() *Patch {
	return v.value
}

func (v *NullablePatch) Set(val *Patch) {
	v.value = val
	v.isSet = true
}

func (v NullablePatch) IsSet() bool {
	return v.isSet
}

func (v *NullablePatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatch(val *Patch) *NullablePatch {
	return &NullablePatch{value: val, isSet: true}
}

func (v NullablePatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
