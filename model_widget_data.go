/*
Eliona API

API to access Eliona Smart Building Assistant

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// WidgetData Data for a widget
type WidgetData struct {
	// Position of the element in widget type
	ElementSequence int32 `json:"elementSequence"`
	// Key for the data
	Key NullableString `json:"key,omitempty"`
	// The master asset id of this widget
	AssetId NullableInt32 `json:"assetId,omitempty"`
	Subtype *HeapSubtype `json:"subtype,omitempty"`
	// Name of the attribute of the asset type
	Attribute NullableString `json:"attribute,omitempty"`
	// Text for frontend
	Description NullableString `json:"description,omitempty"`
}

// NewWidgetData instantiates a new WidgetData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetData(elementSequence int32) *WidgetData {
	this := WidgetData{}
	this.ElementSequence = elementSequence
	var subtype HeapSubtype = SUBTYPE_INPUT
	this.Subtype = &subtype
	return &this
}

// NewWidgetDataWithDefaults instantiates a new WidgetData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetDataWithDefaults() *WidgetData {
	this := WidgetData{}
	var subtype HeapSubtype = SUBTYPE_INPUT
	this.Subtype = &subtype
	return &this
}

// GetElementSequence returns the ElementSequence field value
func (o *WidgetData) GetElementSequence() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ElementSequence
}

// GetElementSequenceOk returns a tuple with the ElementSequence field value
// and a boolean to check if the value has been set.
func (o *WidgetData) GetElementSequenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementSequence, true
}

// SetElementSequence sets field value
func (o *WidgetData) SetElementSequence(v int32) {
	o.ElementSequence = v
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WidgetData) GetKey() string {
	if o == nil || o.Key.Get() == nil {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WidgetData) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *WidgetData) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *WidgetData) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *WidgetData) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *WidgetData) UnsetKey() {
	o.Key.Unset()
}

// GetAssetId returns the AssetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WidgetData) GetAssetId() int32 {
	if o == nil || o.AssetId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AssetId.Get()
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WidgetData) GetAssetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssetId.Get(), o.AssetId.IsSet()
}

// HasAssetId returns a boolean if a field has been set.
func (o *WidgetData) HasAssetId() bool {
	if o != nil && o.AssetId.IsSet() {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given NullableInt32 and assigns it to the AssetId field.
func (o *WidgetData) SetAssetId(v int32) {
	o.AssetId.Set(&v)
}
// SetAssetIdNil sets the value for AssetId to be an explicit nil
func (o *WidgetData) SetAssetIdNil() {
	o.AssetId.Set(nil)
}

// UnsetAssetId ensures that no value is present for AssetId, not even an explicit nil
func (o *WidgetData) UnsetAssetId() {
	o.AssetId.Unset()
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *WidgetData) GetSubtype() HeapSubtype {
	if o == nil || o.Subtype == nil {
		var ret HeapSubtype
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetData) GetSubtypeOk() (*HeapSubtype, bool) {
	if o == nil || o.Subtype == nil {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *WidgetData) HasSubtype() bool {
	if o != nil && o.Subtype != nil {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given HeapSubtype and assigns it to the Subtype field.
func (o *WidgetData) SetSubtype(v HeapSubtype) {
	o.Subtype = &v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WidgetData) GetAttribute() string {
	if o == nil || o.Attribute.Get() == nil {
		var ret string
		return ret
	}
	return *o.Attribute.Get()
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WidgetData) GetAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attribute.Get(), o.Attribute.IsSet()
}

// HasAttribute returns a boolean if a field has been set.
func (o *WidgetData) HasAttribute() bool {
	if o != nil && o.Attribute.IsSet() {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given NullableString and assigns it to the Attribute field.
func (o *WidgetData) SetAttribute(v string) {
	o.Attribute.Set(&v)
}
// SetAttributeNil sets the value for Attribute to be an explicit nil
func (o *WidgetData) SetAttributeNil() {
	o.Attribute.Set(nil)
}

// UnsetAttribute ensures that no value is present for Attribute, not even an explicit nil
func (o *WidgetData) UnsetAttribute() {
	o.Attribute.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WidgetData) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WidgetData) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *WidgetData) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *WidgetData) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *WidgetData) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *WidgetData) UnsetDescription() {
	o.Description.Unset()
}

func (o WidgetData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["elementSequence"] = o.ElementSequence
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.AssetId.IsSet() {
		toSerialize["assetId"] = o.AssetId.Get()
	}
	if o.Subtype != nil {
		toSerialize["subtype"] = o.Subtype
	}
	if o.Attribute.IsSet() {
		toSerialize["attribute"] = o.Attribute.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableWidgetData struct {
	value *WidgetData
	isSet bool
}

func (v NullableWidgetData) Get() *WidgetData {
	return v.value
}

func (v *NullableWidgetData) Set(val *WidgetData) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetData) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetData(val *WidgetData) *NullableWidgetData {
	return &NullableWidgetData{value: val, isSet: true}
}

func (v NullableWidgetData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


